Mappings:
  RegionMap:
    us-west-1:
     "AMI": "ami-0dc5e9ff792ec08e3"
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16 
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: test

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: test

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: test
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: LUIT Project Public Routes

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  WebServerSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable HTTP from 0.0.0.0/0
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '443'
          ToPort: '443'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '8080'
          ToPort: '8080'
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: 0.0.0.0/0

      VpcId: !Ref VPC



  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: t2.micro
      
      SubnetId: !Ref PublicSubnet1
      SecurityGroupIds: 
        - !Ref WebServerSecurityGroup
      KeyName: newkey7
         

              
      Tags:
       - Key: Name
         Value: test  
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash 
          
          cd /tmp
          curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io.key | sudo tee \
          /usr/share/keyrings/jenkins-keyring.asc > /dev/null
          echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
          https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
          /etc/apt/sources.list.d/jenkins.list > /dev/null
          sudo apt-get update
          sudo apt-get install fontconfig openjdk-11-jre -y
          sudo apt-get install jenkins -y


          cd /var/lib/jenkins
          sudo -u jenkins touch jenkins.install.UpgradeWizard.state
          sudo -u jenkins echo "2.0" >> jenkins.install.UpgradeWizard.state
          sudo -u jenkins mkdir init.groovy.d
          cd init.groovy.d
          sudo -u jenkins touch basic-security.groovy
          cat << EOF >> basic-security.groovy
          #!groovy

          import jenkins.model.*
          import hudson.security.*
          def instance = Jenkins.getInstance()
          println "--> creating local user 'admin'"
          def hudsonRealm = new HudsonPrivateSecurityRealm(false)
          hudsonRealm.createAccount('admin','admin')
          instance.setSecurityRealm(hudsonRealm)
          def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
          instance.setAuthorizationStrategy(strategy)
          instance.save()
          EOF

          sudo systemctl restart jenkins

          cd /
          sudo git clone #GIT credentials
          sudo wget http://localhost:8080/jnlpJars/jenkins-cli.jar

          sudo chmod 777 jenkins-cli.jar

          java -jar jenkins-cli.jar -s http://localhost:8080/ -auth 'admin:admin' -webSocket install-plugin workflow-job
          java -jar jenkins-cli.jar -s http://localhost:8080/ -auth 'admin:admin' -webSocket install-plugin workflow-aggregator
          java -jar jenkins-cli.jar -s http://localhost:8080/ -auth 'admin:admin' -webSocket install-plugin Git
          java -jar jenkins-cli.jar -s http://localhost:8080/ -auth 'admin:admin' -webSocket install-plugin github
      
          java -jar jenkins-cli.jar -s http://localhost:8080/ -auth 'admin:admin' -webSocket create-job new-pipe2 < job.xml
          java -jar jenkins-cli.jar -s http://localhost:8080/ -auth 'admin:admin' -webSocket build new-pipe2

              
